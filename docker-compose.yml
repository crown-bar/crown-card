services:
  api:
    build: .
    container_name: crown-card-api
    environment:
      # App
      PORT: 3000
      ROOTPATH: /usr/src/app
      AUTH_TOKEN: ${AUTH_TOKEN}
      ADMIN_AUTH_TOKEN: ${ADMIN_AUTH_TOKEN}
      # DB
      DB_HOST: postgres
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - internal
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"

      # Router (HTTPS)
      - "traefik.http.routers.cc.rule=Host(`cc.thecrownbar.ch`)"
      - "traefik.http.routers.cc.entrypoints=websecure"
      - "traefik.http.routers.cc.tls.certresolver=leresolver"

      # Service (internal container port)
      - "traefik.http.services.cc.loadbalancer.server.port=3000"

      # (Optional) gzip compression + basic security headers
      - "traefik.http.middlewares.cc-compress.compress=true"
      - "traefik.http.middlewares.cc-sec.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.cc-sec.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.cc-sec.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.cc-sec.headers.browserXssFilter=true"
      - "traefik.http.middlewares.cc-sec.headers.contentTypeNosniff=true"
      - "traefik.http.routers.cc.middlewares=cc-compress,cc-sec"


  postgres:
    image: postgres:15-alpine
    container_name: crown-card-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost" ]
      interval: 2s
      timeout: 5s
      retries: 20
    networks:
      - internal

volumes:
  db-data:

networks:
  internal:
  traefik-proxy:
    external: true
